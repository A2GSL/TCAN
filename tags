!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AttentionBlock	model/tcn_block.py	/^class AttentionBlock(nn.Module):$/;"	c
AttentionBlock	model/tcn_block_time_test.py	/^class AttentionBlock(nn.Module):$/;"	c
BLAS_LIBS	data/char_penn/simple-examples/rnnlm-0.2b/makefile	/^BLAS_LIBS = -lcblas -latlas$/;"	m
CC	data/char_penn/simple-examples/rnnlm-0.2b/makefile	/^CC = g++$/;"	m
CFLAGS	data/char_penn/simple-examples/rnnlm-0.2b/makefile	/^CFLAGS = -lm -O2$/;"	m
CRnnLM	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    CRnnLM()		\/\/constructor initializes variables$/;"	f	class:CRnnLM
CRnnLM	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^class CRnnLM{$/;"	c
Chomp1d	model/tcn_block.py	/^class Chomp1d(nn.Module):$/;"	c
Chomp1d	model/tcn_block_time_test.py	/^class Chomp1d(nn.Module):$/;"	c
Config	config.py	/^class Config():$/;"	c
Corpus_char	data/dataset.py	/^class Corpus_char(object):$/;"	c
Corpus_char	utils/dataset.py	/^class Corpus_char(object):$/;"	c
Corpus_mnist	utils/dataset.py	/^class Corpus_mnist(object):$/;"	c
Corpus_word	data/dataset.py	/^class Corpus_word(object):$/;"	c
Corpus_word	utils/dataset.py	/^class Corpus_word(object):$/;"	c
Dictionary_char	data/dataset.py	/^class Dictionary_char(object):$/;"	c
Dictionary_char	utils/dataset.py	/^class Dictionary_char(object):$/;"	c
Dictionary_word	data/dataset.py	/^class Dictionary_word(object):$/;"	c
Dictionary_word	utils/dataset.py	/^class Dictionary_word(object):$/;"	c
EXP_A	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	22;"	d	file:
EXP_C	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	23;"	d	file:
FAST_EXP	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	24;"	d	file:
MAX_STRING	data/char_penn/simple-examples/rnnlm-0.2b/rnnlm.cpp	20;"	d	file:
MAX_STRING	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	12;"	d
OPT_DEF	data/char_penn/simple-examples/rnnlm-0.2b/makefile	/^OPT_DEF = -D USE_BLAS$/;"	m
PositionEmbedding	model/pe.py	/^class PositionEmbedding(nn.Module):$/;"	c
RawDataset	data/dataset.py	/^class RawDataset(data.Dataset):$/;"	c
RawDataset	utils/dataset.py	/^class RawDataset(data.Dataset):$/;"	c
TCANet	model/tcanet.py	/^class TCANet(nn.Module):$/;"	c
TemporalBlock	model/tcn_block.py	/^class TemporalBlock(nn.Module):$/;"	c
TemporalBlock	model/tcn_block_time_test.py	/^class TemporalBlock(nn.Module):$/;"	c
TemporalConvNet	model/tcn_block.py	/^class TemporalConvNet(nn.Module):$/;"	c
TemporalConvNet	model/tcn_block_time_test.py	/^class TemporalConvNet(nn.Module):$/;"	c
VariationalDropout	model/optimizations.py	/^class VariationalDropout(nn.Module):$/;"	c
VariationalHidDropout	model/optimizations.py	/^class VariationalHidDropout(nn.Module):$/;"	c
WeightDropout	model/optimizations.py	/^class WeightDropout(nn.Module):$/;"	c
X_test	add_test.py	/^    X_test = X_test.cuda()$/;"	v
X_train	add_test.py	/^    X_train = X_train.cuda()$/;"	v
Y_test	add_test.py	/^    Y_test = Y_test.cuda()$/;"	v
Y_train	add_test.py	/^    Y_train = Y_train.cuda()$/;"	v
_RNNLMLIB_H_	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	10;"	d
__getitem__	data/dataset.py	/^    def __getitem__(self, index):$/;"	m	class:RawDataset	file:
__getitem__	utils/dataset.py	/^    def __getitem__(self, index):$/;"	m	class:RawDataset	file:
__init__	config.py	/^    def __init__(self, $/;"	m	class:Config
__init__	data/dataset.py	/^    def __init__(self):$/;"	m	class:Dictionary_char
__init__	data/dataset.py	/^    def __init__(self):$/;"	m	class:Dictionary_word
__init__	data/dataset.py	/^    def __init__(self, dir_data_root, dataset_name, task, seq_len, valid_len, is_corpus=True):$/;"	m	class:RawDataset
__init__	data/dataset.py	/^    def __init__(self, path):$/;"	m	class:Corpus_word
__init__	data/dataset.py	/^    def __init__(self, string):$/;"	m	class:Corpus_char
__init__	model/optimizations.py	/^    def __init__(self, dropout=0.3):$/;"	m	class:VariationalDropout
__init__	model/optimizations.py	/^    def __init__(self, module, weights, dropout=0):$/;"	m	class:WeightDropout
__init__	model/optimizations.py	/^    def __init__(self, vhdropout):$/;"	m	class:VariationalHidDropout
__init__	model/pe.py	/^    def __init__(self, emb_size, key_size, value_size, seq_len):$/;"	m	class:PositionEmbedding
__init__	model/tcanet.py	/^    def __init__(self, emb_size, input_output_size, num_channels, seq_len, num_sub_blocks, temp_attn, nheads, en_res,$/;"	m	class:TCANet
__init__	model/tcn_block.py	/^    def __init__(self, chomp_size):$/;"	m	class:Chomp1d
__init__	model/tcn_block.py	/^    def __init__(self, in_channels, key_size, value_size):$/;"	m	class:AttentionBlock
__init__	model/tcn_block.py	/^    def __init__(self, input_output_size, emb_size, num_channels, num_sub_blocks, temp_attn, nheads, en_res,$/;"	m	class:TemporalConvNet
__init__	model/tcn_block.py	/^    def __init__(self, n_inputs, n_outputs, kernel_size, key_size, num_sub_blocks, temp_attn, nheads, en_res, $/;"	m	class:TemporalBlock
__init__	model/tcn_block_time_test.py	/^    def __init__(self, chomp_size):$/;"	m	class:Chomp1d
__init__	model/tcn_block_time_test.py	/^    def __init__(self, in_channels, key_size, value_size):$/;"	m	class:AttentionBlock
__init__	model/tcn_block_time_test.py	/^    def __init__(self, input_output_size, emb_size, num_channels, num_sub_blocks, temp_attn, nheads, en_res,$/;"	m	class:TemporalConvNet
__init__	model/tcn_block_time_test.py	/^    def __init__(self, n_inputs, n_outputs, kernel_size, key_size, num_sub_blocks, temp_attn, nheads, en_res, stride, dilation, $/;"	m	class:TemporalBlock
__init__	utils/dataset.py	/^    def __init__(self):$/;"	m	class:Dictionary_char
__init__	utils/dataset.py	/^    def __init__(self):$/;"	m	class:Dictionary_word
__init__	utils/dataset.py	/^    def __init__(self, dir_data_root, dataset_name, task, seq_len, valid_len, is_corpus=True, is_permute=False, seed=1111):$/;"	m	class:RawDataset
__init__	utils/dataset.py	/^    def __init__(self, path):$/;"	m	class:Corpus_mnist
__init__	utils/dataset.py	/^    def __init__(self, path):$/;"	m	class:Corpus_word
__init__	utils/dataset.py	/^    def __init__(self, string):$/;"	m	class:Corpus_char
__len__	data/dataset.py	/^    def __len__(self):$/;"	m	class:Dictionary_char	file:
__len__	data/dataset.py	/^    def __len__(self):$/;"	m	class:Dictionary_word	file:
__len__	data/dataset.py	/^    def __len__(self):$/;"	m	class:RawDataset	file:
__len__	utils/dataset.py	/^    def __len__(self):$/;"	m	class:Dictionary_char	file:
__len__	utils/dataset.py	/^    def __len__(self):$/;"	m	class:Dictionary_word	file:
__len__	utils/dataset.py	/^    def __len__(self):$/;"	m	class:RawDataset	file:
_get_data	data/dataset.py	/^    def _get_data(self, dir_data_root, dataset_name, task, seq_len, valid_len, is_corpus):$/;"	m	class:RawDataset
_get_data	utils/dataset.py	/^    def _get_data(self, dir_data_root, dataset_name, task, seq_len, valid_len, is_corpus):$/;"	m	class:RawDataset
_make_layers	model/tcn_block.py	/^    def _make_layers(self, num_sub_blocks, n_inputs, n_outputs, kernel_size, stride, dilation, $/;"	m	class:TemporalBlock
_make_layers	model/tcn_block_time_test.py	/^    def _make_layers(self, num_sub_blocks, n_inputs, n_outputs, kernel_size, stride, dilation, $/;"	m	class:TemporalBlock
_setup	model/optimizations.py	/^    def _setup(self):$/;"	m	class:WeightDropout
_setweights	model/optimizations.py	/^    def _setweights(self):$/;"	m	class:WeightDropout
ac	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    real ac;		\/\/actual value stored in neuron$/;"	m	struct:neuron
addWordToVocab	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^int CRnnLM::addWordToVocab(char *word)$/;"	f	class:CRnnLM
add_word	data/dataset.py	/^    def add_word(self, char):$/;"	m	class:Dictionary_char
add_word	data/dataset.py	/^    def add_word(self, word):$/;"	m	class:Dictionary_word
add_word	utils/dataset.py	/^    def add_word(self, char):$/;"	m	class:Dictionary_char
add_word	utils/dataset.py	/^    def add_word(self, word):$/;"	m	class:Dictionary_word
alpha	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    real alpha;$/;"	m	class:CRnnLM
alpha_divide	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int alpha_divide;$/;"	m	class:CRnnLM
alpha_set	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int alpha_set, train_file_set;$/;"	m	class:CRnnLM
anti_k	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int anti_k;$/;"	m	class:CRnnLM
argPos	data/char_penn/simple-examples/rnnlm-0.2b/rnnlm.cpp	/^int argPos(char *str, int argc, char **argv)$/;"	f
args	add_test.py	/^args = parser.parse_args()$/;"	v
args_list	main.py	/^    args_list = [$/;"	v
batch_size	add_test.py	/^batch_size = args.batch_size$/;"	v
batch_size	data/dataset.py	/^    batch_size = 1$/;"	v
batch_size	utils/dataset.py	/^    batch_size = 16$/;"	v	class:Corpus_mnist
beta	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    real beta;$/;"	m	class:CRnnLM
bptt	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int bptt;$/;"	m	class:CRnnLM
bptt_block	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int bptt_block;$/;"	m	class:CRnnLM
bptt_hidden	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    neuron *bptt_hidden;$/;"	m	class:CRnnLM
bptt_history	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int *bptt_history;$/;"	m	class:CRnnLM
bptt_syn0	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    struct synapse *bptt_syn0;$/;"	m	class:CRnnLM	typeref:struct:CRnnLM::synapse
channel_sizes	add_test.py	/^channel_sizes = [args.nhid]*args.levels$/;"	v
char_tensor	data/dataset.py	/^def char_tensor(corpus, string):$/;"	f
char_tensor	utils/dataset.py	/^def char_tensor(corpus, string):$/;"	f
class_cn	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int *class_cn;$/;"	m	class:CRnnLM
class_index	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int class_index;$/;"	m	struct:vocab_word
class_max_cn	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int *class_max_cn;$/;"	m	class:CRnnLM
class_size	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int class_size;$/;"	m	class:CRnnLM
class_words	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int **class_words;$/;"	m	class:CRnnLM
cn	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int cn;$/;"	m	struct:vocab_word
computeNet	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::computeNet(int last_word, int word)$/;"	f	class:CRnnLM
config	config.py	/^config = Config()$/;"	v
copyHiddenLayerToInput	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::copyHiddenLayerToInput()$/;"	f	class:CRnnLM
counter	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int counter;$/;"	m	class:CRnnLM
d	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^    double d;$/;"	m	union:__anon1	file:
d2i	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^} d2i;$/;"	v	typeref:union:__anon1	file:
data_generator	add_test.py	/^def data_generator(N, seq_length):$/;"	f
dataset_name	add_test.py	/^            dataset_name='mnist')$/;"	v
dataset_name	data/dataset.py	/^    dataset_name = 'penn_attn'$/;"	v
dataset_name	utils/dataset.py	/^    dataset_name = 'char_penn'$/;"	v	class:Corpus_mnist
debug_mode	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int debug_mode;$/;"	m	class:CRnnLM
dir_data_root	data/dataset.py	/^    dir_data_root = '.\/'$/;"	v
dir_data_root	utils/dataset.py	/^    dir_data_root = '..\/data'$/;"	v	class:Corpus_mnist
dir_path	model/__init__.py	/^dir_path = os.path.dirname(os.path.realpath(__file__))$/;"	v
dir_path	utils/__init__.py	/^dir_path = os.path.dirname(os.path.realpath(__file__))$/;"	v
direct_size	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int direct_size;$/;"	m	class:CRnnLM
direction_param	model/pe.py	/^    def direction_param(self, k, q):$/;"	m	class:PositionEmbedding
draw_attn	utils/utils.py	/^def draw_attn(visual_info, epoch, args, *dic):$/;"	f
dropout	add_test.py	/^dropout = args.dropout$/;"	v
dynamic	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    real dynamic;$/;"	m	class:CRnnLM
epochs	add_test.py	/^epochs = args.epochs$/;"	v
er	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    real er;		\/\/error value in neuron, used by learning algorithm$/;"	m	struct:neuron
evaluate	add_test.py	/^def evaluate():$/;"	f
evaluate	main.py	/^def evaluate(model, dataloader, criterion, n_dict, args):$/;"	f
forward	model/optimizations.py	/^    def forward(self, *args, **kwargs):$/;"	m	class:WeightDropout
forward	model/optimizations.py	/^    def forward(self, x):$/;"	m	class:VariationalDropout
forward	model/optimizations.py	/^    def forward(self, x):$/;"	m	class:VariationalHidDropout
forward	model/pe.py	/^    def forward(self, input):$/;"	m	class:PositionEmbedding
forward	model/tcanet.py	/^    def forward(self, input):$/;"	m	class:TCANet
forward	model/tcn_block.py	/^    def forward(self, input):$/;"	m	class:AttentionBlock
forward	model/tcn_block.py	/^    def forward(self, x):$/;"	m	class:Chomp1d
forward	model/tcn_block.py	/^    def forward(self, x):$/;"	m	class:TemporalBlock
forward	model/tcn_block.py	/^    def forward(self, x):$/;"	m	class:TemporalConvNet
forward	model/tcn_block_time_test.py	/^    def forward(self, input):$/;"	m	class:AttentionBlock
forward	model/tcn_block_time_test.py	/^    def forward(self, x):$/;"	m	class:Chomp1d
forward	model/tcn_block_time_test.py	/^    def forward(self, x):$/;"	m	class:TemporalBlock
forward	model/tcn_block_time_test.py	/^    def forward(self, x):$/;"	m	class:TemporalConvNet
gen	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int gen;$/;"	m	class:CRnnLM
getWordHash	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^int CRnnLM::getWordHash(char *word)$/;"	f	class:CRnnLM
get_conv_names	model/tcanet.py	/^    def get_conv_names(self, num_channels):$/;"	m	class:TCANet
goToDelimiter	data/char_penn/simple-examples/rnnlm-0.2b/convert.c	/^void goToDelimiter(int delim, FILE *fi)$/;"	f
goToDelimiter	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::goToDelimiter(int delim, FILE *fi)$/;"	f	class:CRnnLM
help	add_test.py	/^                    help='# of levels (default: 8)')$/;"	v
help	add_test.py	/^                    help='batch size (default: 32)')$/;"	v
help	add_test.py	/^                    help='dropout applied to layers (default: 0.0)')$/;"	v
help	add_test.py	/^                    help='gradient clip, -1 means no clip (default: -1)')$/;"	v
help	add_test.py	/^                    help='initial learning rate (default: 4e-3)')$/;"	v
help	add_test.py	/^                    help='kernel size (default: 7)')$/;"	v
help	add_test.py	/^                    help='number of hidden units per layer (default: 30)')$/;"	v
help	add_test.py	/^                    help='optimizer to use (default: Adam)')$/;"	v
help	add_test.py	/^                    help='random seed (default: 1111)')$/;"	v
help	add_test.py	/^                    help='report interval (default: 100')$/;"	v
help	add_test.py	/^                    help='sequence length (default: 400)')$/;"	v
help	add_test.py	/^                    help='upper epoch limit (default: 10)')$/;"	v
help	add_test.py	/^                    help='use CUDA (default: True)')$/;"	v
i	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^        int j,i;$/;"	m	struct:__anon1::__anon2	file:
initNet	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::initNet()$/;"	f	class:CRnnLM
init_weights	model/tcanet.py	/^    def init_weights(self):$/;"	m	class:TCANet
init_weights	model/tcn_block.py	/^    def init_weights(self):$/;"	m	class:TemporalBlock
init_weights	model/tcn_block_time_test.py	/^    def init_weights(self):$/;"	m	class:TemporalBlock
input_channels	add_test.py	/^input_channels = 2$/;"	v
iter	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int iter;$/;"	m	class:CRnnLM
j	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^        int j,i;$/;"	m	struct:__anon1::__anon2	file:
kernel_size	add_test.py	/^kernel_size = args.ksize$/;"	v
lambda	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    real lambda;$/;"	m	class:CRnnLM
layer0_size	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int layer0_size;$/;"	m	class:CRnnLM
layer1_size	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int layer1_size;$/;"	m	class:CRnnLM
layer2_size	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int layer2_size;$/;"	m	class:CRnnLM
learnNet	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::learnNet(int last_word, int word)$/;"	f	class:CRnnLM
learnVocabFromTrainFile	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::learnVocabFromTrainFile()    \/\/assumes that vocabulary is empty$/;"	f	class:CRnnLM
llogp	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    double logp, llogp;$/;"	m	class:CRnnLM
lmprob_file	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    char lmprob_file[MAX_STRING];$/;"	m	class:CRnnLM
load_data	utils/__init__.py	/^def load_data(dir_data_root, dataset_name, task, seq_len, valid_len, is_corpus):$/;"	f
load_dataloader	utils/__init__.py	/^def load_dataloader(dataset, batch_size, num_workers=4, shuffle=False):$/;"	f
load_model	utils/utils.py	/^def load_model(model, args):$/;"	f
logp	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    double logp, llogp;$/;"	m	class:CRnnLM
lr	add_test.py	/^lr = args.lr$/;"	v
main	data/char_penn/simple-examples/2-nbest-rescore/getbest.c	/^void main(int argc, char **argv)$/;"	f
main	data/char_penn/simple-examples/2-nbest-rescore/gettext.c	/^int main()$/;"	f
main	data/char_penn/simple-examples/2-nbest-rescore/makenbest.c	/^int main()$/;"	f
main	data/char_penn/simple-examples/rnnlm-0.2b/convert.c	/^int main()$/;"	f
main	data/char_penn/simple-examples/rnnlm-0.2b/prob.c	/^int main(int argc, char *argv[])$/;"	f
main	data/char_penn/simple-examples/rnnlm-0.2b/rnnlm.cpp	/^int main(int argc, char **argv)$/;"	f
matrixXvector	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::matrixXvector(struct neuron *dest, struct neuron *srcvec, struct synapse *srcmatrix, int matrix_width, int from, int to, int from2, int to2, int type)$/;"	f	class:CRnnLM
min_improvement	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    float min_improvement;$/;"	m	class:CRnnLM
model	add_test.py	/^model = TCANet(input_channels, n_classes, channel_sizes, seq_len=400, num_sub_blocks=1, temp_attn=True, nheads=1, $/;"	v
n	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^        } n;$/;"	m	union:__anon1	typeref:struct:__anon1::__anon2	file:
n_classes	add_test.py	/^n_classes = 1$/;"	v
netFlush	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::netFlush()   \/\/cleans all activations and error vectors$/;"	f	class:CRnnLM
neu0	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    struct neuron *neu0;		\/\/neurons in input layer$/;"	m	class:CRnnLM	typeref:struct:CRnnLM::neuron
neu0b	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    struct neuron *neu0b;$/;"	m	class:CRnnLM	typeref:struct:CRnnLM::neuron
neu1	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    struct neuron *neu1;		\/\/neurons in hidden layer$/;"	m	class:CRnnLM	typeref:struct:CRnnLM::neuron
neu1b	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    struct neuron *neu1b;$/;"	m	class:CRnnLM	typeref:struct:CRnnLM::neuron
neu1b2	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    struct neuron *neu1b2;$/;"	m	class:CRnnLM	typeref:struct:CRnnLM::neuron
neu2	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    struct neuron *neu2;		\/\/neurons in output layer$/;"	m	class:CRnnLM	typeref:struct:CRnnLM::neuron
neu2b	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    struct neuron *neu2b;$/;"	m	class:CRnnLM	typeref:struct:CRnnLM::neuron
neuron	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^struct neuron {$/;"	s
num_processes	main.py	/^    num_processes = len(args_list)$/;"	v
one_iter	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int one_iter;$/;"	m	class:CRnnLM
optimizer	add_test.py	/^optimizer = getattr(optim, args.optim)(model.parameters(), lr=lr)$/;"	v
p	main.py	/^        p = mp.Process(target=train, args=([args_list[i],]))$/;"	v
parser	add_test.py	/^parser = argparse.ArgumentParser(description='Sequence Modeling - The Adding Problem')$/;"	v
prep_dict	data/dataset.py	/^    def prep_dict(self):$/;"	m	class:Dictionary_char
prep_dict	utils/dataset.py	/^    def prep_dict(self):$/;"	m	class:Dictionary_char
prob	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    real prob;$/;"	m	struct:vocab_word
processes	main.py	/^    processes = []$/;"	v
rand_seed	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int rand_seed;$/;"	m	class:CRnnLM
random	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^real CRnnLM::random(real min, real max)$/;"	f	class:CRnnLM
rawdataset	data/dataset.py	/^    rawdataset = RawDataset(dir_data_root, dataset_name, task, seq_len, valid_len)$/;"	v
rawdataset	utils/dataset.py	/^    rawdataset = RawDataset(dir_data_root, dataset_name, task, seq_len, valid_len)$/;"	v	class:Corpus_mnist
readWord	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::readWord(char *word, FILE *fin)$/;"	f	class:CRnnLM
readWordIndex	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^int CRnnLM::readWordIndex(FILE *fin)$/;"	f	class:CRnnLM
real	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^typedef double real;$/;"	t
record	utils/utils.py	/^        num_epochs, lr, num_subblocks, en_res, temp_attn, loss_test, ppl_test, num_parameters_train, log_info):$/;"	f
reset_mask	model/optimizations.py	/^    def reset_mask(self, x):$/;"	m	class:VariationalHidDropout
restoreContext	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::restoreContext()$/;"	f	class:CRnnLM
restoreContext2	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::restoreContext2()$/;"	f	class:CRnnLM
restoreNet	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::restoreNet()    \/\/will read whole network structure$/;"	f	class:CRnnLM
restoreWeights	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::restoreWeights()      \/\/restores current weights and unit activations from backup copy$/;"	f	class:CRnnLM
rnnlm_file	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    char rnnlm_file[MAX_STRING];$/;"	m	class:CRnnLM
saveContext	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::saveContext()		\/\/useful for n-best list processing$/;"	f	class:CRnnLM
saveContext2	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::saveContext2()$/;"	f	class:CRnnLM
saveNet	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::saveNet()       \/\/will save the whole network structure                                                        $/;"	f	class:CRnnLM
saveWeights	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::saveWeights()      \/\/saves current weights and unit activations$/;"	f	class:CRnnLM
save_model	utils/utils.py	/^def save_model(model, args):$/;"	f
save_visual_info	utils/utils.py	/^def save_visual_info(visual_info_all, args):$/;"	f
searchVocab	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^int CRnnLM::searchVocab(char *word)$/;"	f	class:CRnnLM
seq_len	data/dataset.py	/^    seq_len = 20$/;"	v
seq_len	utils/dataset.py	/^    seq_len = 80$/;"	v	class:Corpus_mnist
seq_length	add_test.py	/^seq_length = args.seq_len$/;"	v
setAntiKasparek	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    void setAntiKasparek(int newAnti) {anti_k=newAnti;}$/;"	f	class:CRnnLM
setBPTT	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    void setBPTT(int newval) {bptt=newval;}$/;"	f	class:CRnnLM
setBPTTBlock	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    void setBPTTBlock(int newval) {bptt_block=newval;}$/;"	f	class:CRnnLM
setClassSize	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    void setClassSize(int newSize) {class_size=newSize;}$/;"	f	class:CRnnLM
setDebugMode	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    void setDebugMode(int newDebug) {debug_mode=newDebug;}$/;"	f	class:CRnnLM
setDirectSize	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    void setDirectSize(int newsize) {direct_size=newsize;}$/;"	f	class:CRnnLM
setDynamic	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    void setDynamic(real newD) {dynamic=newD;}$/;"	f	class:CRnnLM
setGen	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    void setGen(real newGen) {gen=newGen;}$/;"	f	class:CRnnLM
setHiddenLayerSize	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    void setHiddenLayerSize(int newsize) {layer1_size=newsize;}$/;"	f	class:CRnnLM
setLMProbFile	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    void setLMProbFile(char *str) {strcpy(lmprob_file, str);}$/;"	f	class:CRnnLM
setLambda	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    void setLambda(real newLambda) {lambda=newLambda;}$/;"	f	class:CRnnLM
setLearningRate	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    void setLearningRate(real newAlpha) {alpha=newAlpha;}$/;"	f	class:CRnnLM
setMinImprovement	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    void setMinImprovement(real newMinImprovement) {min_improvement=newMinImprovement;}$/;"	f	class:CRnnLM
setOneIter	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    void setOneIter(int newOneIter) {one_iter=newOneIter;}$/;"	f	class:CRnnLM
setRandSeed	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    void setRandSeed(int newSeed) {rand_seed=newSeed; srand(rand_seed);}$/;"	f	class:CRnnLM
setRegularization	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    void setRegularization(real newBeta) {beta=newBeta;}$/;"	f	class:CRnnLM
setRnnLMFile	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::setRnnLMFile(char *str)$/;"	f	class:CRnnLM
setTestFile	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::setTestFile(char *str)$/;"	f	class:CRnnLM
setTrainFile	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::setTrainFile(char *str)$/;"	f	class:CRnnLM
setValidFile	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::setValidFile(char *str)$/;"	f	class:CRnnLM
sortVocab	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::sortVocab()$/;"	f	class:CRnnLM
starting_alpha	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    real starting_alpha;$/;"	m	class:CRnnLM
syn0	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    struct synapse *syn0;		\/\/weights between input and hidden layer$/;"	m	class:CRnnLM	typeref:struct:CRnnLM::synapse
syn0b	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    struct synapse *syn0b;$/;"	m	class:CRnnLM	typeref:struct:CRnnLM::synapse
syn1	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    struct synapse *syn1;		\/\/weights between hidden and output layer$/;"	m	class:CRnnLM	typeref:struct:CRnnLM::synapse
syn1b	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    struct synapse *syn1b;$/;"	m	class:CRnnLM	typeref:struct:CRnnLM::synapse
syn_d	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    struct synapse *syn_d;		\/\/direct parameters between input and output layer (similar to Maximum Entropy model parameters)$/;"	m	class:CRnnLM	typeref:struct:CRnnLM::synapse
syn_db	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    struct synapse *syn_db;$/;"	m	class:CRnnLM	typeref:struct:CRnnLM::synapse
syn_dc	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    struct synapse *syn_dc;		\/\/direct parameters between input and class layer$/;"	m	class:CRnnLM	typeref:struct:CRnnLM::synapse
syn_dcb	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    struct synapse *syn_dcb;$/;"	m	class:CRnnLM	typeref:struct:CRnnLM::synapse
synapse	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^struct synapse {$/;"	s
task	data/dataset.py	/^    task = 'train'$/;"	v
task	utils/dataset.py	/^    task = 'train'$/;"	v	class:Corpus_mnist
testGen	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::testGen()$/;"	f	class:CRnnLM
testNbest	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::testNbest()$/;"	f	class:CRnnLM
testNet	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::testNet()$/;"	f	class:CRnnLM
test_file	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    char test_file[MAX_STRING];$/;"	m	class:CRnnLM
tloss	add_test.py	/^    tloss = evaluate()$/;"	v
tokenize	data/dataset.py	/^    def tokenize(self, path):$/;"	m	class:Corpus_word
tokenize	utils/dataset.py	/^    def tokenize(self, path):$/;"	m	class:Corpus_word
total	data/dataset.py	/^    total = 0$/;"	v
total	utils/dataset.py	/^    total = 0$/;"	v	class:Corpus_mnist
train	add_test.py	/^def train(epoch):$/;"	f
train	main.py	/^def train(args):$/;"	f
trainNet	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.cpp	/^void CRnnLM::trainNet()$/;"	f	class:CRnnLM
train_cur_pos	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int train_cur_pos;$/;"	m	class:CRnnLM
train_file	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    char train_file[MAX_STRING];$/;"	m	class:CRnnLM
train_file_set	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int alpha_set, train_file_set;$/;"	m	class:CRnnLM
train_words	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int train_words;$/;"	m	class:CRnnLM
useLMProb	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    void useLMProb(int use) {use_lmprob=use;}$/;"	f	class:CRnnLM
use_lmprob	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int use_lmprob;$/;"	m	class:CRnnLM
valid_file	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    char valid_file[MAX_STRING];$/;"	m	class:CRnnLM
valid_len	data/dataset.py	/^    valid_len = 10$/;"	v
valid_len	utils/dataset.py	/^    valid_len = 40$/;"	v	class:Corpus_mnist
version	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int version;$/;"	m	class:CRnnLM
vocab	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    struct vocab_word *vocab;$/;"	m	class:CRnnLM	typeref:struct:CRnnLM::vocab_word
vocab_hash	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int *vocab_hash;$/;"	m	class:CRnnLM
vocab_hash_size	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int vocab_hash_size;$/;"	m	class:CRnnLM
vocab_max_size	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int vocab_max_size;$/;"	m	class:CRnnLM
vocab_size	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    int vocab_size;$/;"	m	class:CRnnLM
vocab_word	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^struct vocab_word {$/;"	s
weight	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    real weight;	\/\/weight of synapse$/;"	m	struct:synapse
weight_pos_graph	model/pe.py	/^    def weight_pos_graph(self, query, keys):$/;"	m	class:PositionEmbedding
word	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    char word[MAX_STRING];$/;"	m	struct:vocab_word
~CRnnLM	data/char_penn/simple-examples/rnnlm-0.2b/rnnlmlib.h	/^    ~CRnnLM()		\/\/destructor, deallocates memory$/;"	f	class:CRnnLM
